// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from '@xata.io/client';
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client';
import { XATA_API_KEY } from '$env/static/private';

const tables = [
	{
		name: 'Pages',
		columns: [
			{ name: 'name', type: 'string', unique: true },
			{ name: 'lang', type: 'multiple' },
			{ name: 'protected', type: 'bool' },
			{ name: 'PageContentES', type: 'link', link: { table: 'PageContentES' } },
			{ name: 'PageContentEN', type: 'link', link: { table: 'PageContentEN' } }
		]
	},
	{
		name: 'PageContentEN',
		columns: [
			{ name: 'HeroTitle', type: 'text' },
			{ name: 'HeroSubtitle', type: 'text' },
			{ name: 'HeroSubtitle2', type: 'string' },
			{ name: 'HeroCTA', type: 'string' },
			{ name: 'PhoneNumber', type: 'string' },
			{ name: 'PageName', type: 'string' }
		]
	},
	{
		name: 'PageContentES',
		columns: [
			{ name: 'HeroTitle', type: 'text' },
			{ name: 'HeroSubtitle', type: 'text' },
			{ name: 'HeroSubtitle2', type: 'string' },
			{ name: 'HeroCTA', type: 'string' },
			{ name: 'PhoneNumber', type: 'string' }
		]
	},
	{
		name: 'Services',
		columns: [
			{ name: 'title', type: 'string' },
			{ name: 'link', type: 'string' },
			{ name: 'icon', type: 'text' },
			{ name: 'description', type: 'text' },
			{ name: 'title2', type: 'string' },
			{ name: 'long_description', type: 'text' }
		]
	},
	{
		name: 'FAQs',
		columns: [
			{ name: 'Question', type: 'string' },
			{ name: 'Answer', type: 'text' },
			{ name: 'Link', type: 'string' }
		]
	}
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Pages = InferredTypes['Pages'];
export type PagesRecord = Pages & XataRecord;

export type PageContentEN = InferredTypes['PageContentEN'];
export type PageContentENRecord = PageContentEN & XataRecord;

export type PageContentES = InferredTypes['PageContentES'];
export type PageContentESRecord = PageContentES & XataRecord;

export type Services = InferredTypes['Services'];
export type ServicesRecord = Services & XataRecord;

export type FAQs = InferredTypes['FAQs'];
export type FAQsRecord = FAQs & XataRecord;

export type DatabaseSchema = {
	Pages: PagesRecord;
	PageContentEN: PageContentENRecord;
	PageContentES: PageContentESRecord;
	Services: ServicesRecord;
	FAQs: FAQsRecord;
};

const DatabaseClient = buildClient();

export const defaultOptions = {
	databaseURL: 'https://Mr-Mendez-s-workspace-ovgnlj.us-east-1.xata.sh/db/rnainspection',
	apiKey: XATA_API_KEY
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient();
	return instance;
};
