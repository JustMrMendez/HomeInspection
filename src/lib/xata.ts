// Generated by Xata Codegen 0.18.0. Please do not edit.
import {
  type BaseClientOptions,
  buildClient,
  type SchemaInference,
  type XataRecord,
} from "@xata.io/client";


const tables = [
  {
    name: "Pages",
    columns: [
      { name: "name", type: "string", unique: true },
      { name: "lang", type: "multiple" },
      { name: "PageContent", type: "link", link: { table: "PageContent" } },
      { name: "protected", type: "bool" },
      { name: "PageContentES", type: "link", link: { table: "PageContentES" } },
    ],
  },
  {
    name: "PageContent",
    columns: [
      { name: "HeroTitle", type: "text" },
      { name: "HeroSubtitle", type: "text" },
      { name: "HeroSubtitle2", type: "string" },
      { name: "HeroCTA", type: "string" },
      { name: "PhoneNumber", type: "string" },
    ],
  },
  { name: "PageContentES", columns: [] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Pages = InferredTypes["Pages"];
export type PagesRecord = Pages & XataRecord;

export type PageContent = InferredTypes["PageContent"];
export type PageContentRecord = PageContent & XataRecord;

export type PageContentES = InferredTypes["PageContentES"];
export type PageContentESRecord = PageContentES & XataRecord;

export type DatabaseSchema = {
  Pages: PagesRecord;
  PageContent: PageContentRecord;
  PageContentES: PageContentESRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Mr-Mendez-s-workspace-ovgnlj.us-east-1.xata.sh/db/rnainspection",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
